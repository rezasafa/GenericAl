using System;
using System.Collections.Generic;
using System.Linq;

namespace GeneticAlgorithmExample
{
    class Program
    {
        static void Main(string[] args)
        {
            int populationSize = 100;
            int chromosomeLength = 10;
            int maxGenerations = 1000;
            double mutationRate = 0.01;

            List<Chromosome> population = InitializePopulation(populationSize, chromosomeLength);
            for (int generation = 0; generation < maxGenerations; generation++)
            {
                population = EvolvePopulation(population, mutationRate);
                Chromosome bestChromosome = population.OrderByDescending(c => c.Fitness).First();
                Console.WriteLine($"Generation {generation}: Best Fitness = {bestChromosome.Fitness}");
            }
        }

        static List<Chromosome> InitializePopulation(int populationSize, int chromosomeLength)
        {
            Random random = new Random();
            List<Chromosome> population = new List<Chromosome>();
            for (int i = 0; i < populationSize; i++)
            {
                Chromosome chromosome = new Chromosome(chromosomeLength);
                for (int j = 0; j < chromosomeLength; j++)
                {
                    chromosome.Genes[j] = random.NextDouble();
                }
                population.Add(chromosome);
            }
            return population;
        }

        static List<Chromosome> EvolvePopulation(List<Chromosome> population, double mutationRate)
        {
            List<Chromosome> newPopulation = new List<Chromosome>();
            Random random = new Random();
            for (int i = 0; i < population.Count; i++)
            {
                Chromosome parent1 = SelectParent(population);
                Chromosome parent2 = SelectParent(population);
                Chromosome child = Crossover(parent1, parent2);
                Mutate(child, mutationRate);
                newPopulation.Add(child);
            }
            return newPopulation;
        }

        static Chromosome SelectParent(List<Chromosome> population)
        {
            Random random = new Random();
            return population[random.Next(population.Count)];
        }

        static Chromosome Crossover(Chromosome parent1, Chromosome parent2)
        {
            Chromosome child = new Chromosome(parent1.Genes.Length);
            Random random = new Random();
            for (int i = 0; i < parent1.Genes.Length; i++)
            {
                child.Genes[i] = random.NextDouble() < 0.5 ? parent1.Genes[i] : parent2.Genes[i];
            }
            return child;
        }

        static void Mutate(Chromosome chromosome, double mutationRate)
        {
            Random random = new Random();
            for (int i = 0; i < chromosome.Genes.Length; i++)
            {
                if (random.NextDouble() < mutationRate)
                {
                    chromosome.Genes[i] = random.NextDouble();
                }
            }
        }
    }

    class Chromosome
    {
        public double[] Genes { get; set; }
        public double Fitness => Genes.Sum();

        public Chromosome(int length)
        {
            Genes = new double[length];
        }
    }
}