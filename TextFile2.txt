using System;
using System.Collections.Generic;
using System.Linq;


int[] parent1 = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
int[] parent2 = { 2, 6, 8, 9, 3, 5, 7, 0, 1, 4 };

int CrossPoint = new Random().Next(1, parent1.Length / 2);

int[] child1 = new int[parent1.Length];
int[] child2 = new int[parent1.Length];

for (int i = 0; i < CrossPoint; i++)
{
    child1[i] = parent1[i];
    child2[i] = parent2[i];
}

for (int i = CrossPoint; i < parent1.Length; i++)
{
    child1[i] = parent2[i];
    child2[i] = parent1[i];
}

Console.WriteLine("CROSS OVER POINT : " + CrossPoint.ToString());
Console.WriteLine("PARENT aval : " + string.Join(", ", parent1));
Console.WriteLine("PARENT dovom: " + string.Join(", ", parent2));

Console.WriteLine("Child  aval : " + string.Join(", ", child1));
Console.WriteLine("Child  covom: " + string.Join(", ", child2));



bool find = true;
int[] array1 = (int[])child1.Clone();
int[] array2 = (int[])child2.Clone();
int[] result1 = (int[])child1.Clone();
int[] result2 = (int[])child2.Clone();

int checkloop = 0;

while (find)
{
    checkloop++;
    if (checkloop > 5) break;
    Console.WriteLine("----------------new array---------------");
    Console.WriteLine("arr  aval : " + string.Join(", ", result1));
    Console.WriteLine("arr  dovom: " + string.Join(", ", result2));

    var dict1 = new Dictionary<int, int>();
    var dict2 = new Dictionary<int, int>();
    List<int> RepeatValueChild1 = new List<int>();
    List<int> NotExistValueChild1 = new List<int>();
    List<int> RepeatValueChild2 = new List<int>();
    List<int> NotExistValueChild2 = new List<int>();

    Console.WriteLine("----------------child 1");
    foreach (var value in array1)
    {
        // When the key is not found, "count" will be initialized to 0
        dict1.TryGetValue(value, out int count);
        dict1[value] = count + 1;
    }

    foreach (var pair1 in dict1)
    {
        if (pair1.Value > 1)
        {
            Console.WriteLine("Value child1 {0} occurred {1} times.", pair1.Key, pair1.Value);
            RepeatValueChild1.Add(pair1.Key);
        }

    }


    Console.WriteLine("----------------child 2");

    foreach (var value in array2)
    {
        // When the key is not found, "count" will be initialized to 0
        dict2.TryGetValue(value, out int count);
        dict2[value] = count + 1;
    }

    foreach (var pair2 in dict2)
    {
        if (pair2.Value > 1)
        {
            Console.WriteLine("Value child2 {0} occurred {1} times.", pair2.Key, pair2.Value);
            RepeatValueChild2.Add(pair2.Key);
        }

    }

    Console.WriteLine("----------------child - parent 1");
    IEnumerable<int> aOnlyNumbers1 = parent1.Except(child1);

    Console.WriteLine("Numbers in first array but not second array:");
    foreach (var n in aOnlyNumbers1)
    {
        NotExistValueChild1.Add(n);
        Console.WriteLine(n);
    }
    Console.WriteLine("----------------child - parent 2");
    IEnumerable<int> aOnlyNumbers2 = parent2.Except(child2);

    Console.WriteLine("Numbers in first array but not second array:");
    foreach (var n in aOnlyNumbers2)
    {
        NotExistValueChild2.Add(n);
        Console.WriteLine(n);
    }


    if (RepeatValueChild1.Count > 0 && NotExistValueChild1.Count > 0)
    {
        int loopIndex = 0;
        foreach (int item in RepeatValueChild1)
        {
            for (int i = parent1.Length - 1; i > -1; i--)
            {
                if (result1[i] == item)
                {
                    result1[i] = NotExistValueChild1[loopIndex];
                    loopIndex++;
                    break;
                };

            }
        }
    }
    else
    {
        find = false;
        array1 = result1;
        array2 = result2;
    }

    if (RepeatValueChild2.Count > 0 && NotExistValueChild2.Count > 0)
    {
        int loopIndex = 0;
        foreach (int item in RepeatValueChild2)
        {
            for (int i = parent2.Length - 1; i > -1; i--)
            {
                if (result2[i] == item)
                {
                    result2[i] = NotExistValueChild2[loopIndex];
                    loopIndex++;
                    break;
                };

            }
        }
    }
    else
    {
        find = false;
        array1 = result1;
        array2 = result2;
    }

    Console.WriteLine("----------------print---------------");
    Console.WriteLine("result  aval : " + string.Join(", ", result1));
    Console.WriteLine("result  dovom: " + string.Join(", ", result2));
    array1 = result1;
    array2 = result2;

}




Console.ReadKey();
